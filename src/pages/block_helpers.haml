#intro
  %p
    Block helpers make it possible to define custom iterators and
    other helpers that can invoke the passed block with a new
    context.

%h2#basic-blocks
  Basic Blocks

.contents
  .bullet
    .description
      Let's define a simple block helper that simply invokes the
      block as though no helper existed.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        <div class="body">
          {{#noop}}{{body}}{{/noop}}
        </div>
      </div>
    .notes
      The <code>noop</code> helper will receive an options hash.
      This options hash contains a function (<code>options.fn</code>)
      that behaves like a normal compiled Handlebars template.
      Specifically, the function will take a context and return a
      String.
    :javascript
      Handlebars.registerHelper('noop', function(options) {
        return options.fn(this);
      });
    .notes
      Handlebars always invokes helpers with the current context as
      <code>this</code>, so you can simply invoke the block with
      <code>this</code> to evaluate the block in the current context.

%h2#with-helper
  The <code>with</code> helper

.contents
  .bullet
    .description
      Based on the description of the <code>noop</code> helper, it
      should be obvious how to implement a <code>with</code> helper.
      Instead of invoking the block with the current context, we will
      invoke it with whatever context the template passed in.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        {{#with story}}
          <div class="intro">{{{intro}}}</div>
          <div class="body">{{{body}}}</div>
        {{/with}}
      </div>
    .notes
      You might find a helper like this useful if a section of your
      JSON object contains a lot of important properties, and you
      don't want to constantly need to repeat the parent name. The
      above template could be useful with a JSON like:
    :javascript
      {
        title: "First Post",
        story: {
          intro: "Before the jump",
          body: "After the jump"
        }
      }
    .notes
      Implementing a helper like this is a lot like implementing
      the <code>noop</code> helper. Note that helpers take
      parameters, and parameters are evaluated just like expressions
      used directly inside <code>{{mustache}}</code> blocks.
    :javascript
      Handlebars.registerHelper('with', function(context, options) {
        return options.fn(context);
      });
    .notes
      Parameters are passed to helpers in the order that they
      are passed, followed by the block function.

%h2#iterators
  Simple Iterators

.contents
  .bullet
    .description
      A very common use-case for block helpers is using them to define
      custom iterators. In fact, all Handlebars built-in helpers are
      defined as regular Handlebars block helpers. Let's take a look
      at how the built-in <code>each</code> helper works.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        {{#with story}}
          <div class="intro">{{{intro}}}</div>
          <div class="body">{{{body}}}</div>
        {{/with}}
      </div>
      <div class="comments">
        {{#each comments}}
          <div class="comment">
            <h2>{{subject}}</h2>
            {{{{body}}}
          </div>
        {{/each}}
      </div>
    .notes
      In this case, we want to invoke the block passed to <code>each</code>
      once for each element in the comments Array.
    :javascript
      Handlebars.registerHelper('each', function(context, options) {
        var ret = "";

        for(var i=0, j=context.length; i<j; i++) {
          ret = ret + options.fn(context[i]);
        }

        return ret;
      });
    .notes
      In this case, we iterate over the items in the passed parameter,
      invoking the block once with each item. As we iterate, we build
      up a String result, and then return it.

  .bullet
    .description
      It is easy to see how you could use this to implement more advanced
      iterators. For instance, let's create an iterator that creates a
      <code>&lt;ul&gt;</code> wrapper, and wraps each resulting element
      in an <code>&lt;li&gt;</code>.
    :html
      {{#list nav}}
        <a href="{{url}}">{{title}}</a>
      {{/list}}
    .notes
      You would evaluate this template using something like this as
      the context:
    :javascript
      {
        nav: [
          { url: "http://www.yehudakatz.com", title: "Katz Got Your Tongue" },
          { url: "http://www.sproutcore.com/block", title: "SproutCore Blog" },
        ]
      }
    .notes
      The helper would not be that different from the original <code>each</code>
      helper.
    :javascript
      Handlebars.registerHelper('list', function(context, block) {
        var ret = "<ul>";

        for(var i=0, j=context.length; i<j; i++) {
          ret = ret + "<li>" + block(context[i]) + "</li>";
        }

        return ret + "</ul>";
      });
    .notes
      You could, of course, use a library like underscore.js or SproutCore's
      runtime library to make this look a bit prettier. Using SproutCore's
      runtime:
    :javascript
      Handlebars.registerHelper('list', function(context, block) {
        return "<ul>" + context.map(function(item) {
          return "<li>" + block(item) + "</li>";
        }).join("\n") + "</ul>";
      });

%h2#conditionals
  Conditionals

.contents
  .bullet
    .description
      Another relatively common use-case for block helpers is to implement
      conditionals. Again, Handlebars' built-in <code>if</code> and
      <code>unless</code> control structures are implemented as regular
      Handlebars helpers.
    :html
      {{#if isActive}}
        <img src="star.gif" alt="Active">
      {{/if}}
    .notes
      Control structures typically do not change the current context, but
      decide whether or not to invoke the block based upon some variable.
    :javascript
      Handlebars.registerHelper('if', function(conditional, options) {
        if(conditional) {
          return options.fn(this);
        }
      });

  .bullet
    .description
      When writing a conditional, you will often want to make it possible
      for templates to provide a block of HTML that your helper should
      insert if the conditional evaluates to false. Handlebars handles
      this problem by providing generic <code>else</code> functionality
      to block helpers.
    :html
      {{#if isActive}}
        <img src="star.gif" alt="Active">
      {{else}}
        <img src="cry.gif" alt="Inactive">
      {{/if}}
    .notes
      Handlebars provides the block for the <code>else</code> fragment
      as <code>options.inverse</code>. If the template provides no inverse
      section, Handlebars will automatically create a noop function, so
      you don't need to check for the existance of the inverse.
    :javascript
      Handlebars.registerHelper('if', function(conditional, options) {
        if(conditional) {
          return options.fn(this);
        } else {
          return options.inverse(this);
        }
      });
    .notes
      Handlebars provides additional metadata to block helpers by attaching
      them as properties of the options hash. Keep reading for more
      examples.

%h2#hash-arguments
  Hash Arguments

.contents
  .bullet
    .description
      Like regular helpers, block helpers can accept an optional Hash
      as its final argument. Let's revisit the <code>list</code> helper
      from earlier, and make it possible for us to add any number of
      optional attributes to the <code>&lt;ul&gt;</code> element we will
      create.
    :html
      {{list nav id="nav-bar" class="top"}}
        <a href="{{url}}">{{title}}</a>
      {{/list}}
    .notes
      Handlebars provides the final hash as <code>options.hash</code>. This
      makes it easier to accept a variable number of parameters, while
      also accepting an optional Hash. If the template provides no hash
      arguments, Handlebars will automatically pass an empty object
      (<code>{}</code>), so you don't need to check for the existance of
      hash arguments.
    :javascript
      Handlebars.registerHelper('list', function(context, options) {
        var attrs = SC.keys(options.hash).map(function(key) {
          key + '="' + options.hash[key] + '"';
        }).join(" ");

        return "<ul " + attrs + ">" + context.map(function(item) {
          return "<li>" + options.fn(item) + "</li>";
        }).join("\n") + "</ul>";
      });
    .notes
      Hash arguments provide a powerful way to offer a number of optional
      parameters to a block helper without the complexity caused by
      positional arguments.
